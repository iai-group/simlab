"""Utility functions for information needs generation and saving."""

import random
from typing import List

from connectors.mongo.mongo_connector import MongoDBConnector
from connectors.mongo.utils import insert_record
from simlab.core.information_need import InformationNeed
from simlab.core.simulation_domain import SimulationDomain


def save_information_need_batch(
    information_needs: List[InformationNeed], mongo_connector: MongoDBConnector
) -> str:
    """Saves a batch of information needs to the database.

    Args:
        information_needs: List of information needs.
        mongo_connector: MongoDB connector.

    Returns:
        Batch identifier.
    """
    records = []
    for information_need in information_needs:
        record = information_need.to_dict()
        records.append(record)

    id = insert_record(
        mongo_connector,
        "information_needs",
        {"information_needs": records},
    )

    mongo_connector.close_connection()

    return str(id)


def generate_random_information_needs(
    domain: SimulationDomain, num_needs: int
) -> List[InformationNeed]:
    """Generates random information needs given a domain.

    Information needs are generated by selecting a random item from a random
    item collection and specifying constraints and requests.

    Args:
        domain: Domain knowledge.
        num_needs: Number of information needs to generate.

    Returns:
        List of information needs.
    """
    information_needs = []
    domain_informable_slots = domain.get_informable_slots()
    domain_requestable_slots = domain.get_requestable_slots()
    for _ in range(num_needs):
        item_collection = random.choice(
            list(domain.get_item_collections().values())
        )
        random_item = item_collection.get_random_item()
        constraints = {}
        informable_slots = set(domain_informable_slots).intersection(
            random_item.properties.keys()
        )
        num_constraints = random.randint(1, len(informable_slots))
        for slot in random.sample(informable_slots, num_constraints):
            constraints[slot] = random_item.properties.get(slot)

        requestable_slots = set(domain_requestable_slots).symmetric_difference(
            constraints.keys()
        )
        num_requests = random.randint(1, len(requestable_slots))
        requests = random.sample(requestable_slots, num_requests)
        information_needs.append(InformationNeed(constraints, requests))
    return information_needs
