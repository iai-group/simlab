pipeline {
    agent {
        label 'simlab && worker'
    }

    environment {
        // --- GCP Bucket Configurations ---
        GCP_DATA_BUCKET_NAME = 'simlab_data'     

        // --- Local Mount Points for Buckets ---
        MOUNT_POINT_DATA = 'simlab_data'    

        // --- Python Project Specifics ---
        PYTHON_SIMLAB_DIR = 'simlab'
        PYTHON_CONNECTORS_DIR = 'connectors'
        PYTHON_DIALOGUEKIT_DIR = 'dialoguekit'
        PYTHON_GLOBAL_REQUIREMENTS = 'requirements.txt' // Global requirements file
    }

    stages {
        stage('Partial Clone and Prepare Workspace') {
            steps {
                script {
                    echo "Starting sparse clone for branch: ${env.GIT_BRANCH}."
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "${env.GIT_BRANCH}"]],
                        userRemoteConfigs: [[url: "${env.GIT_URL}", credentialsId: '']], 
                        extensions: [
                            [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
                                [$class: 'SparseCheckoutPath', path: "${env.PYTHON_SIMLAB_DIR}/*"],
                                [$class: 'SparseCheckoutPath', path: "${env.PYTHON_CONNECTORS_DIR}/*"],
                                [$class: 'SparseCheckoutPath', path: "${env.PYTHON_DIALOGUEKIT_DIR}/*"],
                                [$class: 'SparseCheckoutPath', path: "${env.PYTHON_GLOBAL_REQUIREMENTS}"]
                            ]],
                            [$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true]
                        ]
                    ])
                }
                echo "Workspace prepared with sparse clone for branch: ${env.GIT_BRANCH}."
            }
        }

        stage('Mount GCP Buckets') {
            steps {
                script {
                    echo "Creating mount points: ${env.MOUNT_POINT_DATA}"
                    sh "mkdir -p ${env.MOUNT_POINT_DATA}"

                    echo "Mounting data bucket: ${env.GCP_DATA_BUCKET_NAME} to ${env.MOUNT_POINT_DATA}"
                    // Mount the data bucket (read/write access)
                    sh "gcsfuse --file-mode=664 --dir-mode=775 --implicit-dirs ${env.GCP_DATA_BUCKET_NAME} ${env.MOUNT_POINT_DATA}"
                }
            }
        }

        // stage('Install Python Requirements') {
        //     steps {
        //         script {
        //             echo "Installing Python requirements from ${env.PYTHON_REQUIREMENTS}..."
        //             sh 'conda create -n simlab_env python=3.9 -y'
        //             sh 'conda activate simlab_env'
        //             sh "pip install --no-cache-dir -r ${env.PYTHON_REQUIREMENTS}"
        //             sh "pip install --no-cache-dir -r ${env.PYTHON_SIMLAB_DIR}/requirements.txt"
        //             sh 'conda deactivate'
                    
        //         }
        //         echo "Python requirements installed."
        //     }
        // }
        stage('Install Python Requirements') {
            steps {
                script {
                    echo "Installing Python requirements..."
                    sh '''
                        eval "$(conda shell hook)"

                        conda create -n simlab_env python=3.9 -y
                        conda activate simlab_env

                        pip install --no-cache-dir -r ${PYTHON_GLOBAL_REQUIREMENTS}
                        pip install --no-cache-dir -r ${PYTHON_SIMLAB_DIR}/requirements.txt

                        conda deactivate
                    '''
                }
                echo "Python requirements installed."
            }
        }

        stage('Run Python Main Script') {
            steps {
                script {
                    echo "Running main Python script..."
                    def dialogueExportFolder = "${env.MOUNT_POINT_DATA}/dialogue_export"

                    // Activate the virtual environment and run the main script (other parameters can be passed as needed)
                    sh '''
                        eval "$(conda shell hook)"

                        conda activate simlab_env
                        python3 -m simlab.main ''' + "${params.CONFIG_FILE_PATH_PARAM}" + ''' -o ''' + "${dialogueExportFolder}" + '''--mongo_uri mongodb://10.128.0.3:27017"
                    '''
                    // sh 'conda activate simlab_env'
                    // sh "python3 -m simlab.main ${params.CONFIG_FILE_PATH_PARAM} -o ${dialogueExportFolder} --mongo_uri mongodb://10.128.0.3:27017"
                    // sh 'conda deactivate'
                    
                    echo "Main Python script executed successfully."
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished for ${env.JOB_NAME} #${env.BUILD_NUMBER}."
            script {
                echo "Attempting to unmount GCP Buckets..."
                // Unmount the buckets to clean up resources.
                // '|| true' ensures the step doesn't fail the pipeline if unmount fails (e.g., already unmounted).
                sh "fusermount -u ${env.MOUNT_POINT_CONFIG} || true"
                sh "fusermount -u ${env.MOUNT_POINT_DATA} || true"
                echo "GCP Buckets unmounted (or attempted)."
            }
        }
        success {
            echo "Pipeline succeeded!"
        }
        failure {
            echo "Pipeline failed! Please check the logs above for details."
            // Add any failure notifications here (e.g., email, Slack, etc.)
        }
        aborted {
            echo "Pipeline was aborted."
        }
    }
}
