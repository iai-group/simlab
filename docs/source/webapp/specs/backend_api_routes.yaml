swagger: "2.0"
info:
  title: "SimLab Backend API"
  version: "1.0.0"
  description: "API documentation for SimLab backend."

host: localhost
basePath: /
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

paths:
  /register:
    post:
      summary: "Register a new user."
      description: "Register a new user with the provided email, username, and password."
      tags:
        - "Authentication"
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              username:
                type: string
              password:
                type: string
            example:
              email: "test@example.com"
              username: "testuser"
              password: "testpassword"
      responses:
        201:
          description: "User registered successfully."
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "User registered successfully."
        400:
          description: "Invalid request body or user already exists."
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            user_exists:
              value:
                message: "User already exists."
            invalid_request:
              value:
                message: "Invalid request body."

  /login:
    post:
      summary: "Login a user."
      description: "Login a user with the provided username and password."
      tags:
        - "Authentication"
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
            example:
              username: "testuser"
              password: "testpassword"
      responses:
        200:
          description: "User logged in successfully."
          headers:
            Set-Cookie:
              description: "Session token cookie."
              type: string
          schema:
            type: object
            properties:
              message:
                type: string
  # Documentation routes
  /template-agent-api:
    get:
      summary: "Get Template Agent API documentation."
      description: "Get the API documentation for the Template Agent service."
      tags:
        - "Template APIs"
      responses:
        200:
          description: "Template Agent API documentation."
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary

  /template-simulator-api:
    get:
      summary: "Get Template Simulator API documentation."
      description: "Get the API documentation for the Template Simulator service."
      tags:
        - "Template APIs"
      responses:
        200:
          description: "Template Simulator API documentation."
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary

  /tasks:
    get:
      summary: "Get supported tasks."
      description: "Get a list of supported tasks from the database."
      tags:
        - "Tasks"
      responses:
        200:
          description: "List of supported tasks."
          schema:
            type: object
            properties:
              tasks:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                    description:
                      type: string
          examples:
            application/json:
              tasks:
                - _id: "1"
                  name: "Task 1"
                  description: "Description of Task 1"
                - _id: "2"
                  name: "Task 2"
                  description: "Description of Task 2"
        400:
          description: "No tasks found."
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "No tasks found."

  /tasks/{task_id}:
    get:
      summary: "Get task details."
      description: "Get details of a specific task by task ID."
      tags:
        - "Tasks"
      parameters:
        - name: task_id
          in: path
          required: true
          description: "ID of the task to retrieve."
          type: string
      responses:
        200:
          description: "Task details."
          schema:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
              description:
                type: string
          examples:
            application/json:
              _id: "1"
              name: "Task 1"
              description: "Description of Task 1"
        400:
          description: "Task not found."
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "Task not found."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "Multiple tasks found with the same ID."

  /metrics:
    get:
      summary: "Get all evaluation metrics."
      description: "Get a list of all evaluation metrics from the database."
      tags:
        - "Metrics"
      responses:
        200:
          description: "List of evaluation metrics."
          schema:
            type: object
            properties:
              metrics:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                    description:
                      type: string
          examples:
            application/json:
              metrics:
                - _id: "1"
                  name: "Metric 1"
                  description: "Description of Metric 1"
                - _id: "2"
                  name: "Metric 2"
                  description: "Description of Metric 2"
        400:
          description: "No metrics found."
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "No metrics found."

  /metrics/{metric_id}:
    get:
      summary: "Get metric details."
      description: "Get details of a specific metric by metric ID."
      tags:
        - "Metrics"
      parameters:
        - name: metric_id
          in: path
          required: true
          description: "ID of the metric to retrieve."
          type: string
      responses:
        200:
          description: "Metric details."
          schema:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
              description:
                type: string
          examples:
            application/json:
              _id: "1"
              name: "Metric 1"
              description: "Description of Metric 1"
        400:
          description: "Metric not found."
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "Metric not found."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "Multiple metrics found with the same ID."

  /agents:
    get:
      summary: "Get all available agents."
      description: "Get a list of all available agents from SimLab docker registry."
      tags:
        - "Conversational agents"
      responses:
        200:
          description: "List of available agents."
          schema:
            type: object
            properties:
              agents:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    image_name:
                      type: string
                    tag:
                      type: string
                    description:
                      type: string
                    type:
                      type: string
                    author:
                      type: string
                    version:
                      type: string
        400:
          description: "No agents found."
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "No agents found."

  /agent:
    post:
      summary: "Get agent details."
      description: "Get details of a specific agent by agent ID."
      tags:
        - "Conversational agents"
      parameters:
        - name: agent_id
          in: path
          required: true
          description: "ID of the agent to retrieve."
          type: string
      responses:
        200:
          description: "Agent details."
          schema:
            type: object
            properties:
              id:
                type: string
              image_name:
                type: string
              tag:
                type: string
              description:
                type: string
              type:
                type: string
              author:
                type: string
              version:
                type: string
        400:
          description: "Agent not found."
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "Agent not found."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "Multiple agents found with the same ID."

  /simulators:
    get:
      summary: "Get all available simulators."
      description: "Get a list of all available simulators from SimLab docker registry."
      tags:
        - "User simulators"
      responses:
        200:
          description: "List of available simulators."
          schema:
            type: object
            properties:
              simulators:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    image_name:
                      type: string
                    tag:
                      type: string
                    description:
                      type: string
                    type:
                      type: string
                    author:
                      type: string
                    version:
                      type: string
        400:
          description: "No simulators found."
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "No simulators found."

  /simulator:
    post:
      summary: "Get simulator details."
      description: "Get details of a specific simulator by simulator ID."
      tags:
        - "User simulators"
      parameters:
        - name: image_name
          in: body
          required: true
          description: "Image name of the simulator to retrieve."
          type: string
      responses:
        200:
          description: "Simulator details."
          schema:
            type: object
            properties:
              id:
                type: string
              image_name:
                type: string
              tag:
                type: string
              description:
                type: string
              type:
                type: string
              author:
                type: string
              version:
                type: string
        400:
          description: "Simulator not found."
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "Simulator not found."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "Multiple simulators found with the same ID."
  # Run routes
  /run-info/{run_id}:
    get:
      summary: "Get run information."
      description: "Get information about a specific run by run ID."
      tags:
        - "Runs"
      parameters:
        - name: run_id
          in: path
          required: true
          description: "ID of the run to retrieve."
          type: string
      responses:
        200:
          description: "Run information."
          content:
            application/json:
              schema:
                type: object
                properties:
                  run_info:
                    type: object
        400:
          description: "Run not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Run not found."
        401:
          description: "Unauthorized access."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized access."
        500:
          description: "Internal server error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Multiple runs found with the same ID."
  /delete-run/{run_id}:
    delete:
      summary: "Delete a run."
      description: "Delete a specific run by run ID."
      tags:
        - "Runs"
      parameters:
        - name: run_id
          in: path
          required: true
          description: "ID of the run to delete."
          type: string
      responses:
        200:
          description: "Run deleted successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Run deleted successfully."
        401:
          description: "Unauthorized access."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized access."
        500:
          description: "Internal server error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting run."
