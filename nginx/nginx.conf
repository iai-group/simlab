events {}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Define a log format that logs all headers dynamically
    log_format with_all_headers '$remote_addr - $remote_user [$time_local] "$request" '
                                '$status $body_bytes_sent "$http_referer" '
                                '"$http_user_agent" "$http_x_forwarded_for" '
                                'Headers: $http_authorization $http_content_type $http_x_requested_with '
                                '$http_accept $http_accept_language $http_accept_encoding '
                                '$http_connection $http_host $http_upgrade '
                                '$http_cache_control $http_origin $http_x_forwarded_proto ';

    access_log /var/log/nginx/access.log with_all_headers;

    server {
        listen 80;
        server_name localhost;

        location / {
            # Redirect HTTP to HTTPS
            proxy_set_header Authorization $http_authorization;  # Forward Basic Auth header
            return 301 https://$host$request_uri;
        }
    }

    server {
        error_log /var/log/nginx/error.log debug;
        access_log /var/log/nginx/access.log;

        listen 443 ssl;
        server_name localhost;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;

        # Add CORS headers
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
        add_header 'Access-Control-Allow-Credentials' 'true';

        # Authentication via Flask API 
        location /authenticate {
            internal;
            proxy_pass https://backend:5001/auth/verify;

            proxy_set_header X-Original-URL $scheme://$http_host$request_uri;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Authorization $http_authorization; # Forward Basic Auth header
            proxy_set_header Content-Length "";
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Docker Registry
        location /v2/ {
            proxy_pass https://registry:5000;
            auth_request /authenticate;
            error_page 401 = @error401;
        }

        # Web Backend

        location /api/ {
            rewrite ^/api/(.*)$ /$1 break;  # Remove the /api/ prefix
            proxy_pass https://backend:5001;
            proxy_ssl_verify off;  # Optional for adhoc self-signed certificates
            error_page 401 = @error401;
        }

        # Web Frontend
        location / {
            proxy_pass https://frontend:3000;
            proxy_ssl_verify off;  # Disable SSL verification for self-signed certs
        }

        # Handle 401 Unauthorized
        location @error401 {
            return 401;
        }
    }

}
