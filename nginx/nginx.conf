events {}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server {
        listen 80;
        server_name localhost;

        location / {
            # Redirect HTTP to HTTPS
            return 301 https://$host$request_uri;
        }
    }

    server {
        error_log /var/log/nginx/error.log debug;
        access_log /var/log/nginx/access.log;

        listen 443 ssl;
        server_name localhost;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;

        # Add CORS headers
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
        add_header 'Access-Control-Allow-Credentials' 'true';

        # Web Backend

        location /api/ {
            rewrite ^/api/(.*)$ /$1 break;  # Remove the /api/ prefix
            proxy_pass https://backend:5005;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_ssl_verify off;  # Optional for adhoc self-signed certificates
            error_page 401 = @error401;
        }

        # Web Frontend
        location / {
            proxy_pass http://frontend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_ssl_verify off;  # Disable SSL verification for self-signed certs
        }

        # Handle 401 Unauthorized
        location @error401 {
            return 401;
        }
    }

}
