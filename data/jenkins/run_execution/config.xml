<!-- Configuration for Jenkins job run-execution -->
<?xml version='1.0' encoding='UTF-8'?>
<project>
	<actions />
	<description>Run simulation-based evaluation given a configuration.</description>
	<keepDependencies>false</keepDependencies>
	<properties>
		<hudson.model.ParametersDefinitionProperty>
			<parameterDefinitions>
				<hudson.model.StringParameterDefinition>
					<name>REGISTRY_URL</name>
					<description>Private container registry URL</description>
					<defaultValue />
					<trim>true</trim>
				</hudson.model.StringParameterDefinition>
				<hudson.model.StringParameterDefinition>
					<name>REGISTRY_USERNAME</name>
					<description>Private container registry username for Jenkins runner</description>
					<defaultValue>runner</defaultValue>
					<trim>true</trim>
				</hudson.model.StringParameterDefinition>
				<hudson.model.StringParameterDefinition>
					<name>REGISTRY_PASSWORD</name>
					<description>Private container registry password</description>
					<defaultValue>pwd_runner</defaultValue>
					<trim>true</trim>
				</hudson.model.StringParameterDefinition>
				<hudson.model.StringParameterDefinition>
					<name>CONFIG_FILE</name>
					<description>Path to the run configuration file</description>
					<trim>true</trim>
				</hudson.model.StringParameterDefinition>
			</parameterDefinitions>
		</hudson.model.ParametersDefinitionProperty>
	</properties>
	<scm class="hudson.scm.NullSCM" />
	<canRoam>false</canRoam>
	<disabled>false</disabled>
	<blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
	<blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
	<triggers />
	<concurrentBuild>false</concurrentBuild>
	<builders>
		<hudson.tasks.Shell>
			<command>#!/bin/bash
# Validate registry parameters
if [ -z "$REGISTRY_URL" ] || [ -z "$REGISTRY_USERNAME" ] || [ -z "$REGISTRY_PASSWORD" ]; then
    echo "Error: Private registry parameters are missing."
    exit 1
fi

# Validate the CONFIG_FILE parameter
if [ -z "$CONFIG_FILE" ]; then
    echo "Error: CONFIG_FILE parameter is not provided."
    exit 1
fi

# Validate that the configuration file exists
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Error: Configuration file '$CONFIG_FILE' not found."
    exit 1
fi</command>
		</hudson.tasks.Shell>
		<hudson.tasks.Shell>
			<command>#!/bin/bash
sudo apt update

# Install docker
sudo apt install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
apt-cache policy docker-ce
sudo apt install docker-ce

# Start the docker service
sudo systemctl start docker

# Install jq
sudo apt-get install -y jq

# Install gcsfuse
export GCSFUSE_REPO=gcsfuse-`lsb_release -c -s`
echo "deb https://packages.cloud.google.com/apt $GCSFUSE_REPO main" | sudo tee /etc/apt/sources.list.d/gcsfuse.list
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt-get update
sudo apt-get install -y fuse gcsfuse

# Install git
sudo apt-get install -y git

# Install python3 and pip
sudo apt-get install -y python3 python3-pip</command>
		</hudson.tasks.Shell>
		<hudson.tasks.Shell>
			<command>#!/bin/bash
# Login to the private registry
docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD $REGISTRY_URL

# Git sparse-checkout to get evaluation codebase and dependencies
REPO_URL="https://github.com/iai-group/simlab.git"

git clone --no-checkout $REPO_URL
cd simlab
git sparse-checkout init --cone
git sparse-checkout set connectors simlab dialoguekit
git checkout main

# Install dependencies
pip install -r requirements.txt
pip install -r simlab/requirements.txt

# Pull docker image names for conversational agents and user simulators
AGENTS=$(jq -r '.agents[]' $CONFIG_FILE)
for agent in $AGENTS; do
    IMAGE=$(jq -r ".agents[\"$agent\"].image" $CONFIG_FILE)
    PORT=$(jq -r ".agents[\"$agent\"].port" $CONFIG_FILE)
    docker pull $IMAGE
    # Get the port exposed by the image
    EXPOSED_PORT=$(docker inspect --format='{{ index .Config.Labels "port" }}' $IMAGE)
    docker run -d -p $PORT:$EXPOSED_PORT $IMAGE
done

SIMULATORS=$(jq -r '.user_simulators[]' $CONFIG_FILE)
for simulator in $SIMULATORS; do
    IMAGE=$(jq -r ".user_simulators[\"$simulator\"].image" $CONFIG_FILE)
    PORT=$(jq -r ".user_simulators[\"$simulator\"].port" $CONFIG_FILE)
    docker pull $IMAGE
    # Get the port exposed by the image
    EXPOSED_PORT=$(docker inspect --format='{{ index .Config.Labels "port" }}' $IMAGE)
    docker run -d -p $PORT:$EXPOSED_PORT $IMAGE
done

# Mount the data directory from GCP (assuming gcsfuse is installed)
DATA_DIR="data/dialogue_export"
mkdir -p "$DATA_DIR"
gcsfuse --implicit-dirs dialogue-export "$DATA_DIR"

if [ $? -ne 0 ]; then
    echo "Error: Failed to mount GCP bucket."
    exit 1
fi

# Run the evaluation
python -m simlab.main "$CONFIG_FILE" -o "$DATA_DIR"

# Unmount the data directory
fusermount -u "$DATA_DIR"</command>
		</hudson.tasks.Shell>
	</builders>
	<publishers />
	<buildWrappers />
</project>